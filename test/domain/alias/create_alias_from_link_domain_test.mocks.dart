// Mocks generated by Mockito 5.3.0 from annotations
// in minify_link/test/domain/alias/create_alias_from_link_domain_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:minify_link/model/alias/res/link_model.dart' as _i2;
import 'package:minify_link/model/alias/res/reverse_link.dart' as _i3;
import 'package:minify_link/repository/alias/i_alias_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLinkModel_0 extends _i1.SmartFake implements _i2.LinkModel {
  _FakeLinkModel_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeReverseLink_1 extends _i1.SmartFake implements _i3.ReverseLink {
  _FakeReverseLink_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [IAliasRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAliasRepository extends _i1.Mock implements _i4.IAliasRepository {
  MockIAliasRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.LinkModel> getShortedLink(String? link) =>
      (super.noSuchMethod(Invocation.method(#getShortedLink, [link]),
              returnValue: _i5.Future<_i2.LinkModel>.value(_FakeLinkModel_0(
                  this, Invocation.method(#getShortedLink, [link]))))
          as _i5.Future<_i2.LinkModel>);
  @override
  _i5.Future<_i3.ReverseLink> getReverseLinkByAlias(String? alias) =>
      (super.noSuchMethod(Invocation.method(#getReverseLinkByAlias, [alias]),
              returnValue: _i5.Future<_i3.ReverseLink>.value(_FakeReverseLink_1(
                  this, Invocation.method(#getReverseLinkByAlias, [alias]))))
          as _i5.Future<_i3.ReverseLink>);
}
